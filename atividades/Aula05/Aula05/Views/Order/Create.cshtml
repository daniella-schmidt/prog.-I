@model Aula05.ViewModels.OrderViewModel

@{
    ViewData["Title"] = "Pedido";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">
                        <i class="bi bi-cart-plus"></i> Pedido
                    </h3>
                </div>
                <div class="card-body">
                    <form id="formOrder" method="post" asp-action="Create" asp-controller="Order">
                        <div class="mb-3">
                            <label asp-for="CustomerId" class="form-label">Cliente</label>
                            <select asp-for="CustomerId" class="form-select" required>
                                <option value="">Selecione um cliente</option>
                                @if (Model.Customers != null)
                                {
                                    foreach (var c in Model.Customers)
                                    {
                                        <option value="@c.Id">@c.Name</option>
                                    }
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <h5>Itens do Pedido</h5>
                            <table class="table table-bordered table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Selecionar</th>
                                        <th>Produto</th>
                                        <th>Quantidade</th>
                                        <th>Valor Unitário</th>
                                        <th>Subtotal</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.SelectedItems != null)
                                    {
                                        for (int i = 0; i < Model.SelectedItems.Count; i++)
                                        {
                                            var item = Model.SelectedItems[i];
                                            var product = item?.OrderItem?.Product;

                                            if (product != null)
                                            {
                                                <tr>
                                                    <td>
                                                        <input type="checkbox"
                                                               asp-for="@Model.SelectedItems[i].IsSelected"
                                                               class="form-check-input item-checkbox" />
                                                    </td>
                                                    <td>
                                                        @product.ProductName
                                                        <input type="hidden" asp-for="@Model.SelectedItems[i].OrderItem.Product!.Id" />
                                                        <input type="hidden" asp-for="@Model.SelectedItems[i].OrderItem.Product!.ProductName" />
                                                        <input type="hidden" asp-for="@Model.SelectedItems[i].OrderItem.Product!.CurrentPrice" />
                                                    </td>
                                                    <td>
                                                        <!--  sempre ativo para preservar valor -->
                                                        <input type="hidden"
                                                               asp-for="@Model.SelectedItems[i].OrderItem.Quantity"
                                                               class="quantity-hidden" />
                                                        <!-- visível que será sincronizado com o hidden -->
                                                        <input type="number"
                                                               class="form-control quantity-input"
                                                               data-index="@i"
                                                               min="1"
                                                               value="1"
                                                               readonly />
                                                    </td>
                                                    <td class="text-end">
                                                        @(product.CurrentPrice.ToString("C"))
                                                    </td>
                                                    <td class="text-end subtotal">R$ 0,00</td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                                <tfoot class="table-light">
                                    <tr>
                                        <th colspan="4" class="text-end">Total:</th>
                                        <th class="text-end" id="totalAmount">R$ 0,00</th>
                                    </tr>
                                </tfoot>
                            </table>

                            <!-- Resumo-->
                            <div class="alert alert-info">
                                <strong>Resumo:</strong> <span id="totalItems">0 itens</span> selecionados
                            </div>
                        </div>

                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a asp-action="Index" asp-controller="Order" class="btn btn-outline-secondary me-md-2">
                                <i class="bi bi-arrow-left"></i> Voltar
                            </a>
                            <button type="submit" class="btn btn-primary" id="btnSubmit">
                                <i class="bi bi-save"></i> Salvar Pedido
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

@section Scripts {
    <script>
        $(document).ready(function() {
            // Manipular mudanças nos checkboxes
            $('.item-checkbox').change(function() {
                const row = $(this).closest('tr');
                const quantityInput = row.find('.quantity-input');
                const quantityHidden = row.find('.quantity-hidden');

                if (this.checked) {
                    quantityInput.prop('readonly', false);
                    quantityInput.addClass('border-primary');
                    // Garantir que há um valor mínimo
                    if (!quantityInput.val() || quantityInput.val() < 1) {
                        quantityInput.val(1);
                    }
                } else {
                    quantityInput.prop('readonly', true);
                    quantityInput.removeClass('border-primary');
                    quantityInput.val(1);
                }

                // Sincronizar com campo hidden
                quantityHidden.val(quantityInput.val());
                calculateTotals();
            });

            // Manipular mudanças na quantidade
            $('.quantity-input').on('input change', function() {
                const index = $(this).data('index');
                const quantityHidden = $(`input[name="SelectedItems[${index}].OrderItem.Quantity"]`);

                // Garantir valor mínimo
                if ($(this).val() < 1) {
                    $(this).val(1);
                }

                // Sincronizar com campo hidden
                quantityHidden.val($(this).val());
                calculateTotals();
            });

            // Validar formulário antes do submit
            $('#formOrder').submit(function(e) {
                const selectedItems = $('.item-checkbox:checked').length;
                const customerId = $('#CustomerId').val();

                if (!customerId) {
                    alert('Por favor, selecione um cliente.');
                    e.preventDefault();
                    return false;
                }

                if (selectedItems === 0) {
                    alert('Por favor, selecione pelo menos um item para o pedido.');
                    e.preventDefault();
                    return false;
                }

                // Mostrar loading no botão
                $('#btnSubmit').prop('disabled', true)
                             .html('<i class="bi bi-hourglass-split"></i> Salvando...');

                return true;
            });

            function calculateTotals() {
                let totalAmount = 0;
                let totalItems = 0;

                $('tbody tr').each(function() {
                    const checkbox = $(this).find('.item-checkbox');
                    const subtotalCell = $(this).find('.subtotal');

                    if (checkbox.prop('checked')) {
                        const quantity = parseInt($(this).find('.quantity-input').val()) || 0;
                        const priceText = $(this).find('td:nth-child(4)').text();
                        // Melhor parsing do preço
                        const price = parseFloat(
                            priceText.replace('R$', '')
                                   .replace(/\./g, '')
                                   .replace(',', '.')
                                   .trim()
                        ) || 0;

                        const subtotal = quantity * price;

                        subtotalCell.text('R$ ' + subtotal.toLocaleString('pt-BR', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        }));

                        totalAmount += subtotal;
                        totalItems += quantity;
                    } else {
                        subtotalCell.text('R$ 0,00');
                    }
                });

                $('#totalAmount').text('R$ ' + totalAmount.toLocaleString('pt-BR', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }));

                $('#totalItems').text(totalItems + (totalItems === 1 ? ' item' : ' itens'));

            }

            // Calcular totais iniciais
            calculateTotals();

            // Monitorar mudanças no cliente
            $('#CustomerId').change(function() {
                calculateTotals();
            });
        });

    </script>
}